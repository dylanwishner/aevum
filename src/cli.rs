use clap::{App, Arg, ArgMatches};

pub fn matches() -> ArgMatches {
    App::new("Aevum")
        .version("0.1.1")
        .author("Dylan Wishner")
        .about("Determine the prescaler and auto-reload register values for a specified period of time for STM32 MCU timer peripherals")
        .arg(Arg::new("CLOCK SPEED")
            .short('c')
            .long("clock")
            .about("The clock speed of the timer peripheral")
            .default_value("8000000")
            .required(false)
            .takes_value(true))
        .arg(Arg::new("TIME")
            .about("The length of the timer (default is in seconds")
            .required(true)
            .takes_value(true))
        .arg(Arg::new("EN_MICROSECONDS")
            .short('u')
            .long("microseconds")
            .about("Set the specified timer period to be in microseconds")
            .conflicts_with_all(&["EN_MILLISECONDS", "EN_SECONDS"])
            .overrides_with_all(&["EN_MILLISECONDS", "EN_SECONDS"])
            .takes_value(false))
        .arg(Arg::new("EN_MILLISECONDS")
            .short('m')
            .long("milliseconds")
            .about("Set the specified timer period to be in milliseconds")
            .takes_value(false))
        .arg(Arg::new("EN_SECONDS")
            .short('s')
            .long("seconds")
            .about("Set the specified timer period to be in seconds")
            .takes_value(false))
        .arg(Arg::new("RESULTS")
            .short('r')
            .long("results")
            .about("The number of results to return")
            .default_value("5")
            .takes_value(true)).get_matches()
}
